// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/22/2019 00:41:49"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TPC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TPC_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TPC_vlg_check_tst (
	gx,
	gy,
	xa,
	xen,
	ya,
	yen,
	sampler_rx
);
input  gx;
input  gy;
input  xa;
input  xen;
input  ya;
input  yen;
input sampler_rx;

reg  gx_expected;
reg  gy_expected;
reg  xa_expected;
reg  xen_expected;
reg  ya_expected;
reg  yen_expected;

reg  gx_prev;
reg  gy_prev;
reg  xa_prev;
reg  xen_prev;
reg  ya_prev;
reg  yen_prev;

reg  gx_expected_prev;
reg  gy_expected_prev;
reg  xa_expected_prev;
reg  xen_expected_prev;
reg  ya_expected_prev;
reg  yen_expected_prev;

reg  last_gx_exp;
reg  last_gy_exp;
reg  last_xa_exp;
reg  last_xen_exp;
reg  last_ya_exp;
reg  last_yen_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	gx_prev = gx;
	gy_prev = gy;
	xa_prev = xa;
	xen_prev = xen;
	ya_prev = ya;
	yen_prev = yen;
end

// update expected /o prevs

always @(trigger)
begin
	gx_expected_prev = gx_expected;
	gy_expected_prev = gy_expected;
	xa_expected_prev = xa_expected;
	xen_expected_prev = xen_expected;
	ya_expected_prev = ya_expected;
	yen_expected_prev = yen_expected;
end



// expected gx
initial
begin
	gx_expected = 1'bX;
end 

// expected xa
initial
begin
	xa_expected = 1'bX;
end 

// expected xen
initial
begin
	xen_expected = 1'bX;
end 

// expected gy
initial
begin
	gy_expected = 1'bX;
end 

// expected ya
initial
begin
	ya_expected = 1'bX;
end 

// expected yen
initial
begin
	yen_expected = 1'bX;
end 
// generate trigger
always @(gx_expected or gx or gy_expected or gy or xa_expected or xa or xen_expected or xen or ya_expected or ya or yen_expected or yen)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected gx = %b | expected gy = %b | expected xa = %b | expected xen = %b | expected ya = %b | expected yen = %b | ",gx_expected_prev,gy_expected_prev,xa_expected_prev,xen_expected_prev,ya_expected_prev,yen_expected_prev);
	$display("| real gx = %b | real gy = %b | real xa = %b | real xen = %b | real ya = %b | real yen = %b | ",gx_prev,gy_prev,xa_prev,xen_prev,ya_prev,yen_prev);
`endif
	if (
		( gx_expected_prev !== 1'bx ) && ( gx_prev !== gx_expected_prev )
		&& ((gx_expected_prev !== last_gx_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gx :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gx_expected_prev);
		$display ("     Real value = %b", gx_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_gx_exp = gx_expected_prev;
	end
	if (
		( gy_expected_prev !== 1'bx ) && ( gy_prev !== gy_expected_prev )
		&& ((gy_expected_prev !== last_gy_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port gy :: @time = %t",  $realtime);
		$display ("     Expected value = %b", gy_expected_prev);
		$display ("     Real value = %b", gy_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_gy_exp = gy_expected_prev;
	end
	if (
		( xa_expected_prev !== 1'bx ) && ( xa_prev !== xa_expected_prev )
		&& ((xa_expected_prev !== last_xa_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xa_expected_prev);
		$display ("     Real value = %b", xa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_xa_exp = xa_expected_prev;
	end
	if (
		( xen_expected_prev !== 1'bx ) && ( xen_prev !== xen_expected_prev )
		&& ((xen_expected_prev !== last_xen_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port xen :: @time = %t",  $realtime);
		$display ("     Expected value = %b", xen_expected_prev);
		$display ("     Real value = %b", xen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_xen_exp = xen_expected_prev;
	end
	if (
		( ya_expected_prev !== 1'bx ) && ( ya_prev !== ya_expected_prev )
		&& ((ya_expected_prev !== last_ya_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ya :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ya_expected_prev);
		$display ("     Real value = %b", ya_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_ya_exp = ya_expected_prev;
	end
	if (
		( yen_expected_prev !== 1'bx ) && ( yen_prev !== yen_expected_prev )
		&& ((yen_expected_prev !== last_yen_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port yen :: @time = %t",  $realtime);
		$display ("     Expected value = %b", yen_expected_prev);
		$display ("     Real value = %b", yen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_yen_exp = yen_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TPC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire gx;
wire gy;
wire xa;
wire xen;
wire ya;
wire yen;

wire sampler;                             

// assign statements (if any)                          
TPC i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.gx(gx),
	.gy(gy),
	.xa(xa),
	.xen(xen),
	.ya(ya),
	.yen(yen)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

TPC_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

TPC_vlg_check_tst tb_out(
	.gx(gx),
	.gy(gy),
	.xa(xa),
	.xen(xen),
	.ya(ya),
	.yen(yen),
	.sampler_rx(sampler)
);
endmodule

