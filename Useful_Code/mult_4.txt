module mult_4(a,b,m);
input[3:0] a,b;
output[7:0] m;
wire[3:0] m0,m1,m2,m3;
wire[7:0] M0,M1;
wire c;
assign m0=(b[0])?a:4'd0;
assign m1=(b[1])?a:4'd0;
assign m2=(b[2])?a:4'd0;
assign m3=(b[3])?a:4'd0;
cadd8 v0({1'd0,m3,3'd0},{2'd0,m2,2'd0},1'd0,M0,c);
cadd8 v1({3'd0,m1,1'd0},{4'd0,m0},1'd0,M1,c);
cadd8 v2(M1,M0,1'd0,m,c);
endmodule

module cadd8(a,b,cin,s,cout);
input[7:0] a,b;
input cin;
output cout;
output[7:0] s;
wire w0;
cadd4 f0(a[3:0],b[3:0],cin,s[3:0],w0);
cadd4 f1(a[7:4],b[7:4],w0,s[7:4],cout);
endmodule

module cadd4(A,B,Cin,S,Cout);
input[3:0] A,B;
input Cin;
output[3:0] S;
output Cout;
wire[3:0] p,q;
wire c1,c2,c3;
assign p[0]=A[0]|B[0];
assign p[1]=A[1]|B[1];
assign p[2]=A[2]|B[2];
assign p[3]=A[3]|B[3];
assign q[0]=A[0]&B[0];
assign q[1]=A[1]&B[1];
assign q[2]=A[2]&B[2];
assign q[3]=A[3]&B[3];
assign c1=q[0]|(p[0]&Cin);
assign c2=q[1]|(p[1]&q[0])|(p[1]&p[0]&Cin);
assign c3=q[2]|(p[2]&q[1])|(p[2]&p[1]&q[0])|(p[2]&p[1]&p[0]&Cin);
assign Cout=q[3]|(p[3]&q[2])|(p[3]&p[2]&q[1])|(p[3]&p[2]&p[1]&q[0])|(p[3]&p[2]&p[1]&p[0]&Cin);
assign S[0]=A[0]^B[0]^Cin;
assign S[1]=A[1]^B[1]^c1;
assign S[2]=A[2]^B[2]^c2;
assign S[3]=A[3]^B[3]^c3;
endmodule


