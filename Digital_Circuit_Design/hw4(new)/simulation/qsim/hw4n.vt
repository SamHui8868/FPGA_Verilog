// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2019 00:18:23"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    hw4n
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hw4n_vlg_sample_tst(
	Dip_sel,
	F,
	reset,
	sel,
	sampler_tx
);
input [1:0] Dip_sel;
input  F;
input  reset;
input  sel;
output sampler_tx;

reg sample;
time current_time;
always @(Dip_sel or F or reset or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module hw4n_vlg_check_tst (
	address_,
	clk10M,
	clk25K,
	CP,
	data,
	Dout,
	one_shot,
	start,
	str,
	sampler_rx
);
input [4:0] address_;
input  clk10M;
input  clk25K;
input  CP;
input [15:0] data;
input  Dout;
input  one_shot;
input  start;
input  str;
input sampler_rx;

reg [4:0] address__expected;
reg  clk10M_expected;
reg  clk25K_expected;
reg  CP_expected;
reg [15:0] data_expected;
reg  Dout_expected;
reg  one_shot_expected;
reg  start_expected;
reg  str_expected;

reg [4:0] address__prev;
reg  clk10M_prev;
reg  clk25K_prev;
reg  CP_prev;
reg [15:0] data_prev;
reg  Dout_prev;
reg  one_shot_prev;
reg  start_prev;
reg  str_prev;

reg [4:0] address__expected_prev;
reg  clk10M_expected_prev;
reg  clk25K_expected_prev;
reg  CP_expected_prev;
reg [15:0] data_expected_prev;
reg  Dout_expected_prev;
reg  one_shot_expected_prev;
reg  start_expected_prev;
reg  str_expected_prev;

reg [4:0] last_address__exp;
reg  last_clk10M_exp;
reg  last_clk25K_exp;
reg  last_CP_exp;
reg [15:0] last_data_exp;
reg  last_Dout_exp;
reg  last_one_shot_exp;
reg  last_start_exp;
reg  last_str_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	address__prev = address_;
	clk10M_prev = clk10M;
	clk25K_prev = clk25K;
	CP_prev = CP;
	data_prev = data;
	Dout_prev = Dout;
	one_shot_prev = one_shot;
	start_prev = start;
	str_prev = str;
end

// update expected /o prevs

always @(trigger)
begin
	address__expected_prev = address__expected;
	clk10M_expected_prev = clk10M_expected;
	clk25K_expected_prev = clk25K_expected;
	CP_expected_prev = CP_expected;
	data_expected_prev = data_expected;
	Dout_expected_prev = Dout_expected;
	one_shot_expected_prev = one_shot_expected;
	start_expected_prev = start_expected;
	str_expected_prev = str_expected;
end


// expected address_[ 4 ]
initial
begin
	address__expected[4] = 1'bX;
end 
// expected address_[ 3 ]
initial
begin
	address__expected[3] = 1'bX;
end 
// expected address_[ 2 ]
initial
begin
	address__expected[2] = 1'bX;
end 
// expected address_[ 1 ]
initial
begin
	address__expected[1] = 1'bX;
end 
// expected address_[ 0 ]
initial
begin
	address__expected[0] = 1'bX;
end 

// expected clk10M
initial
begin
	clk10M_expected = 1'bX;
end 

// expected clk25K
initial
begin
	clk25K_expected = 1'bX;
end 

// expected CP
initial
begin
	CP_expected = 1'bX;
end 
// expected data[ 15 ]
initial
begin
	data_expected[15] = 1'bX;
end 
// expected data[ 14 ]
initial
begin
	data_expected[14] = 1'bX;
end 
// expected data[ 13 ]
initial
begin
	data_expected[13] = 1'bX;
end 
// expected data[ 12 ]
initial
begin
	data_expected[12] = 1'bX;
end 
// expected data[ 11 ]
initial
begin
	data_expected[11] = 1'bX;
end 
// expected data[ 10 ]
initial
begin
	data_expected[10] = 1'bX;
end 
// expected data[ 9 ]
initial
begin
	data_expected[9] = 1'bX;
end 
// expected data[ 8 ]
initial
begin
	data_expected[8] = 1'bX;
end 
// expected data[ 7 ]
initial
begin
	data_expected[7] = 1'bX;
end 
// expected data[ 6 ]
initial
begin
	data_expected[6] = 1'bX;
end 
// expected data[ 5 ]
initial
begin
	data_expected[5] = 1'bX;
end 
// expected data[ 4 ]
initial
begin
	data_expected[4] = 1'bX;
end 
// expected data[ 3 ]
initial
begin
	data_expected[3] = 1'bX;
end 
// expected data[ 2 ]
initial
begin
	data_expected[2] = 1'bX;
end 
// expected data[ 1 ]
initial
begin
	data_expected[1] = 1'bX;
end 
// expected data[ 0 ]
initial
begin
	data_expected[0] = 1'bX;
end 

// expected Dout
initial
begin
	Dout_expected = 1'bX;
end 

// expected one_shot
initial
begin
	one_shot_expected = 1'bX;
end 

// expected start
initial
begin
	start_expected = 1'bX;
end 

// expected str
initial
begin
	str_expected = 1'bX;
end 
// generate trigger
always @(address__expected or address_ or clk10M_expected or clk10M or clk25K_expected or clk25K or CP_expected or CP or data_expected or data or Dout_expected or Dout or one_shot_expected or one_shot or start_expected or start or str_expected or str)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected address_ = %b | expected clk10M = %b | expected clk25K = %b | expected CP = %b | expected data = %b | expected Dout = %b | expected one_shot = %b | expected start = %b | expected str = %b | ",address__expected_prev,clk10M_expected_prev,clk25K_expected_prev,CP_expected_prev,data_expected_prev,Dout_expected_prev,one_shot_expected_prev,start_expected_prev,str_expected_prev);
	$display("| real address_ = %b | real clk10M = %b | real clk25K = %b | real CP = %b | real data = %b | real Dout = %b | real one_shot = %b | real start = %b | real str = %b | ",address__prev,clk10M_prev,clk25K_prev,CP_prev,data_prev,Dout_prev,one_shot_prev,start_prev,str_prev);
`endif
	if (
		( address__expected_prev[0] !== 1'bx ) && ( address__prev[0] !== address__expected_prev[0] )
		&& ((address__expected_prev[0] !== last_address__exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address__expected_prev);
		$display ("     Real value = %b", address__prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address__exp[0] = address__expected_prev[0];
	end
	if (
		( address__expected_prev[1] !== 1'bx ) && ( address__prev[1] !== address__expected_prev[1] )
		&& ((address__expected_prev[1] !== last_address__exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address__expected_prev);
		$display ("     Real value = %b", address__prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address__exp[1] = address__expected_prev[1];
	end
	if (
		( address__expected_prev[2] !== 1'bx ) && ( address__prev[2] !== address__expected_prev[2] )
		&& ((address__expected_prev[2] !== last_address__exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address__expected_prev);
		$display ("     Real value = %b", address__prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address__exp[2] = address__expected_prev[2];
	end
	if (
		( address__expected_prev[3] !== 1'bx ) && ( address__prev[3] !== address__expected_prev[3] )
		&& ((address__expected_prev[3] !== last_address__exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address__expected_prev);
		$display ("     Real value = %b", address__prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address__exp[3] = address__expected_prev[3];
	end
	if (
		( address__expected_prev[4] !== 1'bx ) && ( address__prev[4] !== address__expected_prev[4] )
		&& ((address__expected_prev[4] !== last_address__exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address_[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address__expected_prev);
		$display ("     Real value = %b", address__prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_address__exp[4] = address__expected_prev[4];
	end
	if (
		( clk10M_expected_prev !== 1'bx ) && ( clk10M_prev !== clk10M_expected_prev )
		&& ((clk10M_expected_prev !== last_clk10M_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk10M :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk10M_expected_prev);
		$display ("     Real value = %b", clk10M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_clk10M_exp = clk10M_expected_prev;
	end
	if (
		( clk25K_expected_prev !== 1'bx ) && ( clk25K_prev !== clk25K_expected_prev )
		&& ((clk25K_expected_prev !== last_clk25K_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk25K :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk25K_expected_prev);
		$display ("     Real value = %b", clk25K_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_clk25K_exp = clk25K_expected_prev;
	end
	if (
		( CP_expected_prev !== 1'bx ) && ( CP_prev !== CP_expected_prev )
		&& ((CP_expected_prev !== last_CP_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CP :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CP_expected_prev);
		$display ("     Real value = %b", CP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_CP_exp = CP_expected_prev;
	end
	if (
		( data_expected_prev[0] !== 1'bx ) && ( data_prev[0] !== data_expected_prev[0] )
		&& ((data_expected_prev[0] !== last_data_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[0] = data_expected_prev[0];
	end
	if (
		( data_expected_prev[1] !== 1'bx ) && ( data_prev[1] !== data_expected_prev[1] )
		&& ((data_expected_prev[1] !== last_data_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[1] = data_expected_prev[1];
	end
	if (
		( data_expected_prev[2] !== 1'bx ) && ( data_prev[2] !== data_expected_prev[2] )
		&& ((data_expected_prev[2] !== last_data_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[2] = data_expected_prev[2];
	end
	if (
		( data_expected_prev[3] !== 1'bx ) && ( data_prev[3] !== data_expected_prev[3] )
		&& ((data_expected_prev[3] !== last_data_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[3] = data_expected_prev[3];
	end
	if (
		( data_expected_prev[4] !== 1'bx ) && ( data_prev[4] !== data_expected_prev[4] )
		&& ((data_expected_prev[4] !== last_data_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[4] = data_expected_prev[4];
	end
	if (
		( data_expected_prev[5] !== 1'bx ) && ( data_prev[5] !== data_expected_prev[5] )
		&& ((data_expected_prev[5] !== last_data_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[5] = data_expected_prev[5];
	end
	if (
		( data_expected_prev[6] !== 1'bx ) && ( data_prev[6] !== data_expected_prev[6] )
		&& ((data_expected_prev[6] !== last_data_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[6] = data_expected_prev[6];
	end
	if (
		( data_expected_prev[7] !== 1'bx ) && ( data_prev[7] !== data_expected_prev[7] )
		&& ((data_expected_prev[7] !== last_data_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[7] = data_expected_prev[7];
	end
	if (
		( data_expected_prev[8] !== 1'bx ) && ( data_prev[8] !== data_expected_prev[8] )
		&& ((data_expected_prev[8] !== last_data_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[8] = data_expected_prev[8];
	end
	if (
		( data_expected_prev[9] !== 1'bx ) && ( data_prev[9] !== data_expected_prev[9] )
		&& ((data_expected_prev[9] !== last_data_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[9] = data_expected_prev[9];
	end
	if (
		( data_expected_prev[10] !== 1'bx ) && ( data_prev[10] !== data_expected_prev[10] )
		&& ((data_expected_prev[10] !== last_data_exp[10]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[10] = data_expected_prev[10];
	end
	if (
		( data_expected_prev[11] !== 1'bx ) && ( data_prev[11] !== data_expected_prev[11] )
		&& ((data_expected_prev[11] !== last_data_exp[11]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[11] = data_expected_prev[11];
	end
	if (
		( data_expected_prev[12] !== 1'bx ) && ( data_prev[12] !== data_expected_prev[12] )
		&& ((data_expected_prev[12] !== last_data_exp[12]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[12] = data_expected_prev[12];
	end
	if (
		( data_expected_prev[13] !== 1'bx ) && ( data_prev[13] !== data_expected_prev[13] )
		&& ((data_expected_prev[13] !== last_data_exp[13]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[13] = data_expected_prev[13];
	end
	if (
		( data_expected_prev[14] !== 1'bx ) && ( data_prev[14] !== data_expected_prev[14] )
		&& ((data_expected_prev[14] !== last_data_exp[14]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[14] = data_expected_prev[14];
	end
	if (
		( data_expected_prev[15] !== 1'bx ) && ( data_prev[15] !== data_expected_prev[15] )
		&& ((data_expected_prev[15] !== last_data_exp[15]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_expected_prev);
		$display ("     Real value = %b", data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_data_exp[15] = data_expected_prev[15];
	end
	if (
		( Dout_expected_prev !== 1'bx ) && ( Dout_prev !== Dout_expected_prev )
		&& ((Dout_expected_prev !== last_Dout_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dout_expected_prev);
		$display ("     Real value = %b", Dout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Dout_exp = Dout_expected_prev;
	end
	if (
		( one_shot_expected_prev !== 1'bx ) && ( one_shot_prev !== one_shot_expected_prev )
		&& ((one_shot_expected_prev !== last_one_shot_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port one_shot :: @time = %t",  $realtime);
		$display ("     Expected value = %b", one_shot_expected_prev);
		$display ("     Real value = %b", one_shot_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_one_shot_exp = one_shot_expected_prev;
	end
	if (
		( start_expected_prev !== 1'bx ) && ( start_prev !== start_expected_prev )
		&& ((start_expected_prev !== last_start_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port start :: @time = %t",  $realtime);
		$display ("     Expected value = %b", start_expected_prev);
		$display ("     Real value = %b", start_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_start_exp = start_expected_prev;
	end
	if (
		( str_expected_prev !== 1'bx ) && ( str_prev !== str_expected_prev )
		&& ((str_expected_prev !== last_str_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port str :: @time = %t",  $realtime);
		$display ("     Expected value = %b", str_expected_prev);
		$display ("     Real value = %b", str_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_str_exp = str_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#100000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module hw4n_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] Dip_sel;
reg F;
reg reset;
reg sel;
// wires                                               
wire [4:0] address_;
wire clk10M;
wire clk25K;
wire CP;
wire [15:0] data;
wire Dout;
wire one_shot;
wire start;
wire str;

wire sampler;                             

// assign statements (if any)                          
hw4n i1 (
// port map - connection between master ports and signals/registers   
	.address_(address_),
	.clk10M(clk10M),
	.clk25K(clk25K),
	.CP(CP),
	.data(data),
	.Dip_sel(Dip_sel),
	.Dout(Dout),
	.F(F),
	.one_shot(one_shot),
	.reset(reset),
	.sel(sel),
	.start(start),
	.str(str)
);
// Dip_sel[ 1 ]
initial
begin
	Dip_sel[1] = 1'b1;
end 
// Dip_sel[ 0 ]
initial
begin
	Dip_sel[0] = 1'b1;
end 

// F
always
begin
	F = 1'b0;
	F = #10000 1'b1;
	#10000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// sel
initial
begin
	sel = 1'b1;
end 

hw4n_vlg_sample_tst tb_sample (
	.Dip_sel(Dip_sel),
	.F(F),
	.reset(reset),
	.sel(sel),
	.sampler_tx(sampler)
);

hw4n_vlg_check_tst tb_out(
	.address_(address_),
	.clk10M(clk10M),
	.clk25K(clk25K),
	.CP(CP),
	.data(data),
	.Dout(Dout),
	.one_shot(one_shot),
	.start(start),
	.str(str),
	.sampler_rx(sampler)
);
endmodule

